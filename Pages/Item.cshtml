@page
@model WebUI.Pages.ItemModel

@{
    ViewData["Title"] = "Item List";
}

<h1>Item List 🍕</h1>
<form method="post" class="card p-3">
    <div class="row">
        <div asp-validation-summary="All"></div>
    </div>
    <div class="form-group mb-0 align-middle">
        @* As is common for many Tag Helpers, it uses an asp-for attribute. The attribute accepts a specified PageModel property. In this case, the value of the PageModel Name property will be rendered as the content for an HTML <label> element. The asp-for attribute is scoped to the PageModel for the Razor page, so the @ symbol isn't used. The label is dynamic as is needed here, but remains compact and easy to add in your markup. *@
        <label asp-for="NewItem.Name">Name</label>
        <input type="text" asp-for="NewItem.Name" class="mr-5">
        <label asp-for="NewItem.Size">Size</label>
        <select asp-for="NewItem.Size" asp-items="Html.GetEnumSelectList<ItemSize>()" class="mr-5"></select>
        <label asp-for="NewItem.Price"></label>
        <input asp-for="NewItem.Price" class="mr-5" />
        <label asp-for="NewItem.IsGlutenFree">Gluten Free</label>
        <input type="checkbox" asp-for="NewItem.IsGlutenFree" class="mr-5">
        <button class="btn btn-primary">Add</button>
    </div>
</form>
<table class="table mt-5">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Price</th>
            <th scope="col">Size</th>
            <th scope="col">Gluten Free</th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    @foreach (var item in Model.items)
    {
        <tr>
            <td>@item.Name</td>
            <td>@($"{item.Price:C}")</td>
            <td>@item.Size</td>
            <td>@Model.GlutenFreeText(item)</td>
            <td>
                <form method="post" asp-page-handler="Delete" asp-route-id="@item.Id">
                    <button class="btn btn-danger">Delete</button>
                </form>
            </td>
        </tr>
    }
</table>

@section Scripts {
    @*  uses the Partial Tag Helper to asynchronously render a partial view: *@
    @* The Partial Tag Helper's name attribute accepts the partial view name without the file extension. A view discovery process locates the partial view in the project. *@
<partial name="_ValidationScriptsPartial" />
}
